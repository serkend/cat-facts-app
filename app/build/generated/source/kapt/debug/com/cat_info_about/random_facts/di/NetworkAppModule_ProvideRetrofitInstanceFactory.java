// Generated by Dagger (https://dagger.dev).
package com.cat_info_about.random_facts.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkAppModule_ProvideRetrofitInstanceFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetworkAppModule_ProvideRetrofitInstanceFactory(
      Provider<OkHttpClient> okHttpClientProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofitInstance(okHttpClientProvider.get());
  }

  public static NetworkAppModule_ProvideRetrofitInstanceFactory create(
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetworkAppModule_ProvideRetrofitInstanceFactory(okHttpClientProvider);
  }

  public static Retrofit provideRetrofitInstance(OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(NetworkAppModule.INSTANCE.provideRetrofitInstance(okHttpClient));
  }
}
